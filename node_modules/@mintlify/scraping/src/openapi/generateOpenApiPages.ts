import { validate } from '@mintlify/common';
import type {
  DecoratedNavigation,
  DecoratedNavigationGroup,
  Navigation,
  NavigationGroup,
  DecoratedNavigationPage,
} from '@mintlify/models';
import { OpenAPI } from 'openapi-types';

import {
  getOpenApiDefinition,
  GenerateOpenApiPagesOptions,
  OpenApiPageGenerationResult,
  processOpenApiPath,
  DEFAULT_API_GROUP_NAME,
} from './common.js';

export async function generateOpenApiPages(
  pathOrDocumentOrUrl: string | OpenAPI.Document | URL,
  opts?: GenerateOpenApiPagesOptions
): Promise<OpenApiPageGenerationResult<Navigation, DecoratedNavigation>> {
  const { document, isUrl } = await getOpenApiDefinition(pathOrDocumentOrUrl);
  const { schema } = await validate(document);

  if (schema?.paths === undefined || Object.keys(schema.paths).length === 0) {
    throw new Error('No paths defined.');
  }

  const nav: Navigation = [];
  const decoratedNav: DecoratedNavigation = [];
  const writePromises: Promise<void>[] = [];
  const pagesAcc: Record<string, DecoratedNavigationPage> = {};

  Object.entries(schema.paths).forEach(([path, pathItemObject]) => {
    if (!pathItemObject || typeof pathItemObject !== 'object') {
      return;
    }
    processOpenApiPath<Navigation, DecoratedNavigation>(
      path,
      pathItemObject,
      schema as OpenAPI.Document,
      nav,
      decoratedNav,
      writePromises,
      pagesAcc,
      opts ?? {},
      findNavGroup
    );
  });

  await Promise.all(writePromises);

  return {
    nav,
    decoratedNav,
    spec: schema as OpenAPI.Document,
    pagesAcc,
    isUrl,
  };
}
const findNavGroup = <T extends NavigationGroup | DecoratedNavigationGroup>(
  nav: T['pages'][number][],
  groupName: string = DEFAULT_API_GROUP_NAME
): T['pages'][number][] => {
  const group = nav.find(
    (fileOrGroup) =>
      typeof fileOrGroup === 'object' && 'group' in fileOrGroup && fileOrGroup.group === groupName
  ) as T | undefined;
  if (group === undefined) {
    const newGroup = {
      group: groupName,
      pages: [],
    };
    nav.push(newGroup);
    return newGroup.pages;
  } else {
    return group.pages;
  }
};
