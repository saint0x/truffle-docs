import { OpenAPI } from 'openapi-types';
import { describe, it, expect } from 'vitest';

import { DEFAULT_API_GROUP_NAME } from '../src/openapi/common.js';
import { generateOpenApiPagesForDocsConfig } from '../src/openapi/generateOpenApiPagesForDocsConfig.js';

describe('generateOpenApiPagesForDocsConfig', () => {
  it('should throw error for empty paths', async () => {
    const emptyDoc: OpenAPI.Document = {
      openapi: '3.0.0',
      info: {
        title: 'Test API',
        version: '1.0.0',
      },
      paths: {},
    };

    await expect(generateOpenApiPagesForDocsConfig(emptyDoc)).rejects.toThrow('No paths defined.');
  });

  it('should generate navigation structure for simple API', async () => {
    const simpleDoc: OpenAPI.Document = {
      openapi: '3.0.0',
      info: {
        title: 'Test API',
        version: '1.0.0',
      },
      paths: {
        '/users': {
          get: {
            operationId: 'getUsers',
            summary: 'Get Users',
            responses: {
              '200': {
                description: 'Successful response',
              },
            },
          },
        },
      },
    };

    const result = await generateOpenApiPagesForDocsConfig(simpleDoc);

    // Check nav structure
    expect(result.nav).toHaveLength(1);
    expect(result.nav[0]).toHaveProperty('group', DEFAULT_API_GROUP_NAME);
    expect(result.nav[0]).toHaveProperty('pages');

    // Check decorated nav structure
    expect(result.decoratedNav).toHaveLength(1);
    expect(result.decoratedNav[0]).toHaveProperty('group', DEFAULT_API_GROUP_NAME);
    expect(result.decoratedNav[0]).toHaveProperty('pages');
  });

  it('should handle custom group names', async () => {
    const docWithTags: OpenAPI.Document = {
      openapi: '3.0.0',
      info: {
        title: 'Test API',
        version: '1.0.0',
      },
      paths: {
        '/users': {
          get: {
            operationId: 'getUsers',
            summary: 'Get Users',
            tags: ['Users'],
            responses: {
              '200': {
                description: 'Successful response',
              },
            },
          },
        },
      },
    };

    const result = await generateOpenApiPagesForDocsConfig(docWithTags);

    // Check that the group name matches the tag
    expect(result.nav).toHaveLength(1);
    expect(result.nav[0]).toHaveProperty('group', 'Users');
  });

  it('should handle multiple paths and methods', async () => {
    const complexDoc: OpenAPI.Document = {
      openapi: '3.0.0',
      info: {
        title: 'Test API',
        version: '1.0.0',
      },
      paths: {
        '/users': {
          get: {
            operationId: 'getUsers',
            summary: 'Get Users',
            tags: ['Users'],
            responses: {
              '200': {
                description: 'Successful response',
              },
            },
          },
          post: {
            operationId: 'createUser',
            summary: 'Create User',
            tags: ['Users'],
            responses: {
              '201': {
                description: 'User created',
              },
            },
          },
        },
        '/products': {
          get: {
            operationId: 'getProducts',
            summary: 'Get Products',
            tags: ['Products'],
            responses: {
              '200': {
                description: 'Successful response',
              },
            },
          },
        },
      },
    };

    const result = await generateOpenApiPagesForDocsConfig(complexDoc);

    // Should have two groups (Users and Products)
    expect(result.nav).toHaveLength(2);

    // Check that pages were generated for all operations
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const allPages = result.nav.flatMap((group) => (group as any).pages);
    expect(allPages).toHaveLength(3); // getUsers, createUser, getProducts
  });

  it('should handle URL input', async () => {
    const validUrl = new URL('https://api.example.com/openapi.json');

    // Mock fetch implementation would be needed for this test
    // This is just to show the structure
    await expect(generateOpenApiPagesForDocsConfig(validUrl)).rejects.toThrow();
  });
});
