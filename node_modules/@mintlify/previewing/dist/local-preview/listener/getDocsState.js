var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { generateOpenApiAnchorsOrTabs, categorizeFilePaths, generateOpenApiDivisions, MintConfigUpdater, DocsConfigUpdater, } from '@mintlify/prebuild';
import { upgradeToDocsConfig } from '@mintlify/validation';
import fse from 'fs-extra';
import { join } from 'path';
import { CMD_EXEC_PATH, CLIENT_PATH } from '../../constants.js';
export const getDocsState = () => __awaiter(void 0, void 0, void 0, function* () {
    const { openApiFiles } = yield categorizeFilePaths(CMD_EXEC_PATH);
    try {
        const mintConfig = yield MintConfigUpdater.getConfig(join(CMD_EXEC_PATH, 'mint.json'));
        const docsConfig = upgradeToDocsConfig(mintConfig);
        const { mintConfig: newMintConfig } = yield generateOpenApiAnchorsOrTabs(mintConfig, openApiFiles, CLIENT_PATH);
        const { newDocsConfig, pagesAcc, openApiFiles: newOpenApiFiles, } = yield generateOpenApiDivisions(docsConfig, openApiFiles, CLIENT_PATH);
        return {
            mintConfig: newMintConfig,
            pagesAcc,
            openApiFiles: newOpenApiFiles,
            docsConfig: newDocsConfig,
        };
    }
    catch (_a) {
        const docsJsonPath = join(CMD_EXEC_PATH, 'docs.json');
        if (!(yield fse.pathExists(docsJsonPath)))
            throw new Error('No config found');
        const docsConfig = yield DocsConfigUpdater.getConfig(docsJsonPath);
        const { newDocsConfig, pagesAcc, openApiFiles: newOpenApiFiles, } = yield generateOpenApiDivisions(docsConfig, openApiFiles, CLIENT_PATH);
        return { pagesAcc, openApiFiles: newOpenApiFiles, docsConfig: newDocsConfig };
    }
});
