var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import fse from 'fs-extra';
import { join } from 'path';
import { NEXT_PROPS_PATH } from '../../constants.js';
import { generateNav } from './generate.js';
import { getDocsState } from './getDocsState.js';
import { readJsonFile } from './utils.js';
export const updateGeneratedNav = () => __awaiter(void 0, void 0, void 0, function* () {
    const { pagesAcc } = yield getDocsState();
    const { generatedNav, generatedDocsNav } = yield generateNav(pagesAcc);
    if (generatedNav) {
        const targetPath = join(NEXT_PROPS_PATH, 'generatedNav.json');
        yield fse.outputFile(targetPath, JSON.stringify(generatedNav, null, 2), {
            flag: 'w',
        });
    }
    const targetDocsPath = join(NEXT_PROPS_PATH, 'generatedDocsNav.json');
    yield fse.outputFile(targetDocsPath, JSON.stringify(generatedDocsNav, null, 2), {
        flag: 'w',
    });
});
export const updateOpenApiFiles = (providedOpenApiFiles) => __awaiter(void 0, void 0, void 0, function* () {
    if (providedOpenApiFiles == undefined) {
        const { openApiFiles } = yield getDocsState();
        providedOpenApiFiles = openApiFiles;
    }
    const targetPath = join(NEXT_PROPS_PATH, 'openApiFiles.json');
    yield fse.outputFile(targetPath, JSON.stringify(providedOpenApiFiles, null, 2), {
        flag: 'w',
    });
});
export const upsertOpenApiFile = (openApiFile) => __awaiter(void 0, void 0, void 0, function* () {
    const sourcePath = join(NEXT_PROPS_PATH, 'openApiFiles.json');
    let existingOpenApiFiles = [];
    try {
        existingOpenApiFiles = (yield readJsonFile(sourcePath));
    }
    catch (_a) { }
    const existingIndex = existingOpenApiFiles.findIndex((file) => file.originalFileLocation === openApiFile.originalFileLocation);
    if (existingIndex >= 0) {
        existingOpenApiFiles[existingIndex] = openApiFile;
    }
    else {
        existingOpenApiFiles.push(openApiFile);
    }
    yield fse.outputFile(sourcePath, JSON.stringify(existingOpenApiFiles, null, 2), {
        flag: 'w',
    });
});
