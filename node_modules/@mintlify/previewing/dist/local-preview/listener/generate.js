var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { generateDecoratedMintNavigationFromPages, getConfigObj, categorizeFilePaths, createPage, generateDecoratedDocsNavigationFromPages, } from '@mintlify/prebuild';
import { upgradeToDocsConfig } from '@mintlify/validation';
import { promises as _promises } from 'fs';
import { join } from 'path';
import { CMD_EXEC_PATH, NEXT_PROPS_PATH } from '../../constants.js';
const { readFile } = _promises;
const createFilenamePageMetadataMap = (contentDirectoryPath_1, contentFilenames_1, openApiFiles_1, ...args_1) => __awaiter(void 0, [contentDirectoryPath_1, contentFilenames_1, openApiFiles_1, ...args_1], void 0, function* (contentDirectoryPath, contentFilenames, openApiFiles, pagesAcc = {}) {
    const contentPromises = [];
    contentFilenames.forEach((filename) => {
        contentPromises.push((() => __awaiter(void 0, void 0, void 0, function* () {
            const sourcePath = join(contentDirectoryPath, filename);
            const contentStr = (yield readFile(sourcePath)).toString();
            const { slug, pageMetadata } = yield createPage(filename, contentStr, contentDirectoryPath, openApiFiles, true);
            pagesAcc = Object.assign(Object.assign({}, pagesAcc), { [slug]: pageMetadata });
        }))());
    });
    yield Promise.all(contentPromises);
    return pagesAcc;
});
export const generateNav = (pagesAcc) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const { contentFilenames, openApiFiles } = yield categorizeFilePaths(CMD_EXEC_PATH);
    const [filenamePageMetadataMap, configObj, docsConfigObj] = yield Promise.all([
        createFilenamePageMetadataMap(CMD_EXEC_PATH, contentFilenames, openApiFiles, pagesAcc),
        getConfigObj(NEXT_PROPS_PATH, 'mint'),
        getConfigObj(NEXT_PROPS_PATH, 'docs'),
    ]);
    let generatedNav;
    if (configObj) {
        generatedNav = generateDecoratedMintNavigationFromPages(filenamePageMetadataMap, configObj.navigation);
    }
    const generatedDocsNav = generateDecoratedDocsNavigationFromPages(filenamePageMetadataMap, (_a = docsConfigObj === null || docsConfigObj === void 0 ? void 0 : docsConfigObj.navigation) !== null && _a !== void 0 ? _a : upgradeToDocsConfig(configObj).navigation);
    return { generatedNav, generatedDocsNav };
});
